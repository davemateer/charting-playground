{"version":3,"sources":["shared/constants.ts","shared/data.ts","reactvis/ReactVisAreaChartImpl.tsx","reactvis/ReactVisLineChartImpl.tsx","recharts/AreaChartImpl.tsx","recharts/BarChartImpl.tsx","recharts/LineChartImpl.tsx","recharts/PieChartImpl.tsx","shared/ChartContainer.tsx","victory/VictoryAreaChartImpl.tsx","victory/VictoryBarChartImpl.tsx","victory/VictoryLineChartImpl.tsx","victory/VictoryPieChartImpl.tsx","reactvis/ReactVisArcChartImpl.tsx","reactvis/ReactVisBarChartImpl.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["chartAspect","chartColors","statusColors","approved","pending","denied","canceled","sampleCasesOverTime","date","pended","caseStatusLast60Days","name","value","averageTimeToClose","hours","hh","snf","irf","data","map","d","ix","x","parseISO","getTime","y","ReactVisAreaChartImpl","height","tickFormat","t","format","curve","color","fill","ReactVisLineChartImpl","formatDate","AreaChartImpl","ResponsiveContainer","width","aspect","AreaChart","Area","type","dataKey","stroke","CartesianGrid","XAxis","tickFormatter","YAxis","Tooltip","BarChartImpl","BarChart","label","Legend","Bar","stackId","LineChartImpl","LineChart","Line","PieChartImpl","PieChart","Pie","nameKey","innerRadius","entry","index","Cell","align","layout","verticalAlign","ChartContainer","caption","children","className","VictoryAreaChartImpl","theme","VictoryTheme","material","interpolation","style","dependentAxis","VictoryBarChartImpl","colorScale","VictoryLineChartImpl","VictoryPieChartImpl","angle","ReactVisArcChartImpl","data1","data2","data3","ReactVisBarChartImpl","xType","stackBy","barWidth","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a73a6e9.chunk.js","sourcesContent":["export const chartAspect = 1.6;\n\nexport const chartColors = [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\"];\n\nexport const statusColors = {\n  approved: \"#00C49F\",\n  pending: \"#FF8042\",\n  denied: \"#cc0000\",\n  canceled: \"#777\",\n};\n","import { statusColors } from \"./constants\";\n\ntype caseOverTimeType = {\n  date: string;\n  pended: number;\n};\n\nexport const sampleCasesOverTime: caseOverTimeType[] = [\n  {\n    date: \"2021-09-05\",\n    pended: 16,\n  },\n  {\n    date: \"2021-09-06\",\n    pended: 15,\n  },\n  {\n    date: \"2021-09-07\",\n    pended: 21,\n  },\n  {\n    date: \"2021-09-08\",\n    pended: 20,\n  },\n  {\n    date: \"2021-09-09\",\n    pended: 23,\n  },\n  {\n    date: \"2021-09-10\",\n    pended: 15,\n  },\n  {\n    date: \"2021-09-11\",\n    pended: 10,\n  },\n];\n\ninterface caseStatusValue {\n  name: keyof typeof statusColors;\n  value: number;\n}\n\nexport const caseStatusLast60Days: caseStatusValue[] = [\n  { name: \"approved\", value: 45 },\n  { name: \"pending\", value: 17 },\n  { name: \"canceled\", value: 6 },\n  { name: \"denied\", value: 19 },\n];\n\nexport const averageTimeToClose = [\n  {\n    hours: \"0-4\",\n    hh: 1,\n    snf: 0,\n    irf: 1,\n  },\n  {\n    hours: \"5-8\",\n    hh: 2,\n    snf: 1,\n    irf: 0,\n  },\n  {\n    hours: \"9-12\",\n    hh: 5,\n    snf: 2,\n    irf: 3,\n  },\n  {\n    hours: \"13-16\",\n    hh: 8,\n    snf: 3,\n    irf: 4,\n  },\n  {\n    hours: \"17-20\",\n    hh: 11,\n    snf: 7,\n    irf: 2,\n  },\n  {\n    hours: \"21-24\",\n    hh: 12,\n    snf: 11,\n    irf: 6,\n  },\n  {\n    hours: \"25-28\",\n    hh: 17,\n    snf: 10,\n    irf: 5,\n  },\n  {\n    hours: \"29-32\",\n    hh: 11,\n    snf: 12,\n    irf: 5,\n  },\n  {\n    hours: \"33-36\",\n    hh: 10,\n    snf: 10,\n    irf: 4,\n  },\n  {\n    hours: \"37-40\",\n    hh: 7,\n    snf: 2,\n    irf: 3,\n  },\n  {\n    hours: \"41-44\",\n    hh: 5,\n    snf: 2,\n    irf: 2,\n  },\n  {\n    hours: \"45-48\",\n    hh: 3,\n    snf: 4,\n    irf: 0,\n  },\n  {\n    hours: \"> 48\",\n    hh: 5,\n    snf: 4,\n    irf: 2,\n  },\n];\n","import \"../../node_modules/react-vis/dist/style.css\";\nimport { format, parseISO } from \"date-fns\";\nimport {\n  AreaSeries,\n  AreaSeriesPoint,\n  FlexibleWidthXYPlot,\n  HorizontalGridLines,\n  VerticalGridLines,\n  XAxis,\n  YAxis,\n} from \"react-vis\";\nimport { statusColors } from \"../shared/constants\";\nimport { sampleCasesOverTime } from \"../shared/data\";\n\nconst data: AreaSeriesPoint[] = sampleCasesOverTime.map((d, ix) => ({\n  x: parseISO(d.date).getTime(),\n  y: d.pended,\n}));\n\nconst ReactVisAreaChartImpl = () => (\n  <FlexibleWidthXYPlot height={300}>\n    <VerticalGridLines />\n    <HorizontalGridLines />\n    <XAxis tickFormat={(t) => format(t, \"M/d\")} />\n    <YAxis />\n    <AreaSeries\n      data={data}\n      curve=\"curveNatural\"\n      color={statusColors[\"pending\"]}\n      fill=\"#FF8042aa\"\n    />\n  </FlexibleWidthXYPlot>\n);\n\nexport default ReactVisAreaChartImpl;\n","import \"../../node_modules/react-vis/dist/style.css\";\nimport { format, parseISO } from \"date-fns\";\nimport {\n  FlexibleWidthXYPlot,\n  HorizontalGridLines,\n  LineMarkSeries,\n  LineSeriesPoint,\n  VerticalGridLines,\n  XAxis,\n  YAxis,\n} from \"react-vis\";\nimport { statusColors } from \"../shared/constants\";\nimport { sampleCasesOverTime } from \"../shared/data\";\n\nconst data: LineSeriesPoint[] = sampleCasesOverTime.map((d, ix) => ({\n  x: parseISO(d.date).getTime(),\n  y: d.pended,\n}));\n\nconst ReactVisLineChartImpl = () => (\n  <FlexibleWidthXYPlot height={300}>\n    <VerticalGridLines />\n    <HorizontalGridLines />\n    <XAxis tickFormat={(t) => format(t, \"M/d\")} />\n    <YAxis />\n    <LineMarkSeries\n      data={data}\n      curve=\"curveNatural\"\n      color={statusColors[\"pending\"]}\n    />\n  </FlexibleWidthXYPlot>\n);\n\nexport default ReactVisLineChartImpl;\n","import { format, parseISO } from \"date-fns\";\nimport {\n  Area,\n  AreaChart,\n  CartesianGrid,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { chartAspect, statusColors } from \"../shared/constants\";\nimport { sampleCasesOverTime } from \"../shared/data\";\n\nconst formatDate = (date: string) => {\n  return format(parseISO(date), \"M/d\");\n};\n\nconst AreaChartImpl = () => (\n  <ResponsiveContainer width=\"100%\" aspect={chartAspect}>\n    <AreaChart data={sampleCasesOverTime}>\n      <Area\n        name=\"Pended cases\"\n        type=\"monotone\"\n        dataKey=\"pended\"\n        stroke={statusColors[\"pending\"]}\n        fill=\"#FF8042aa\"\n      />\n      <CartesianGrid />\n      <XAxis dataKey=\"date\" tickFormatter={formatDate} />\n      <YAxis />\n      <Tooltip />\n    </AreaChart>\n  </ResponsiveContainer>\n);\n\nexport default AreaChartImpl;\n","import {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { ChartProps } from \"../shared/ChartProps\";\nimport { chartAspect, chartColors } from \"../shared/constants\";\nimport { averageTimeToClose } from \"../shared/data\";\n\nconst BarChartImpl = ({ aspect = chartAspect }: ChartProps) => (\n  <ResponsiveContainer width=\"100%\" aspect={aspect}>\n    <BarChart data={averageTimeToClose}>\n      <CartesianGrid />\n      <XAxis dataKey=\"hours\" label=\"Hours\" />\n      <YAxis label=\"Cases\" />\n      <Tooltip />\n      <Legend />\n      <Bar dataKey=\"hh\" stackId=\"a\" fill={chartColors[0]} />\n      <Bar dataKey=\"snf\" stackId=\"a\" fill={chartColors[1]} />\n      <Bar dataKey=\"irf\" stackId=\"a\" fill={chartColors[2]} />\n    </BarChart>\n  </ResponsiveContainer>\n);\n\nexport default BarChartImpl;\n","import { format, parseISO } from \"date-fns\";\nimport {\n  CartesianGrid,\n  Line,\n  LineChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { chartAspect, statusColors } from \"../shared/constants\";\nimport { sampleCasesOverTime } from \"../shared/data\";\n\nconst formatDate = (date: string) => {\n  return format(parseISO(date), \"M/d\");\n};\n\nconst LineChartImpl = () => (\n  <ResponsiveContainer width=\"100%\" aspect={chartAspect}>\n    <LineChart data={sampleCasesOverTime}>\n      <Line\n        name=\"Pended cases\"\n        type=\"monotone\"\n        dataKey=\"pended\"\n        stroke={statusColors[\"pending\"]}\n      />\n      <CartesianGrid />\n      <XAxis dataKey=\"date\" tickFormatter={formatDate} />\n      <YAxis />\n      <Tooltip />\n    </LineChart>\n  </ResponsiveContainer>\n);\n\nexport default LineChartImpl;\n","import React from \"react\";\nimport { Cell, Legend, Pie, PieChart, ResponsiveContainer } from \"recharts\";\nimport { chartAspect, statusColors } from \"../shared/constants\";\nimport { caseStatusLast60Days } from \"../shared/data\";\n\nconst PieChartImpl = () => (\n  <ResponsiveContainer width=\"100%\" aspect={chartAspect}>\n    <PieChart>\n      <Pie\n        data={caseStatusLast60Days}\n        dataKey=\"value\"\n        nameKey=\"name\"\n        label\n        innerRadius=\"50%\"\n      >\n        {caseStatusLast60Days.map((entry, index) => (\n          <Cell key={index} fill={statusColors[entry.name]} />\n        ))}\n      </Pie>\n      <Legend align=\"right\" layout=\"vertical\" verticalAlign=\"top\" />\n    </PieChart>\n  </ResponsiveContainer>\n);\n\nexport default PieChartImpl;\n","import React from \"react\";\n\ntype Props = {\n  caption: string;\n  className?: string;\n};\n\nconst ChartContainer: React.FC<Props> = ({ caption, children, className }) => (\n  <figure className={className}>\n    {children}\n    <figcaption>{caption}</figcaption>\n  </figure>\n);\n\nexport default ChartContainer;\n","import { format, parseISO } from \"date-fns\";\nimport { VictoryArea, VictoryAxis, VictoryChart, VictoryTheme } from \"victory\";\nimport { statusColors } from \"../shared/constants\";\nimport { sampleCasesOverTime } from \"../shared/data\";\n\nconst formatDate = (date: string) => {\n  return format(parseISO(date), \"M/d\");\n};\n\nconst VictoryAreaChartImpl = () => (\n  <VictoryChart theme={VictoryTheme.material}>\n    <VictoryArea\n      data={sampleCasesOverTime}\n      x=\"date\"\n      y=\"pended\"\n      interpolation=\"natural\"\n      style={{ data: { fill: \"#FF8042aa\", stroke: statusColors[\"pending\"] } }}\n    />\n    <VictoryAxis dependentAxis />\n    <VictoryAxis tickFormat={(d) => formatDate(d)} />\n  </VictoryChart>\n);\n\nexport default VictoryAreaChartImpl;\n","import { VictoryBar, VictoryChart, VictoryStack, VictoryTheme } from \"victory\";\nimport { chartColors } from \"../shared/constants\";\nimport { averageTimeToClose } from \"../shared/data\";\n\nconst VictoryBarChartImpl = () => (\n  <VictoryChart theme={VictoryTheme.material}>\n    <VictoryStack colorScale={chartColors}>\n      <VictoryBar data={averageTimeToClose} x=\"hours\" y=\"hh\" />\n      <VictoryBar data={averageTimeToClose} x=\"hours\" y=\"snf\" />\n      <VictoryBar data={averageTimeToClose} x=\"hours\" y=\"irf\" />\n    </VictoryStack>\n  </VictoryChart>\n);\n\nexport default VictoryBarChartImpl;\n","import { format, parseISO } from \"date-fns\";\nimport { VictoryAxis, VictoryChart, VictoryLine, VictoryTheme } from \"victory\";\nimport { statusColors } from \"../shared/constants\";\nimport { sampleCasesOverTime } from \"../shared/data\";\n\nconst formatDate = (date: string) => {\n  return format(parseISO(date), \"M/d\");\n};\n\nconst VictoryLineChartImpl = () => (\n  <VictoryChart theme={VictoryTheme.material}>\n    <VictoryLine\n      data={sampleCasesOverTime}\n      x=\"date\"\n      y=\"pended\"\n      interpolation=\"natural\"\n      style={{ data: { stroke: statusColors[\"pending\"] } }}\n    />\n    <VictoryAxis dependentAxis />\n    <VictoryAxis tickFormat={(d) => formatDate(d)} />\n  </VictoryChart>\n);\n\nexport default VictoryLineChartImpl;\n","import { VictoryPie } from \"victory\";\nimport { caseStatusLast60Days } from \"../shared/data\";\n\nconst VictoryPieChartImpl = () => (\n  <VictoryPie data={caseStatusLast60Days} x=\"name\" y=\"value\" innerRadius={50} />\n);\n\nexport default VictoryPieChartImpl;\n","import \"../../node_modules/react-vis/dist/style.css\";\nimport { RadialChart } from \"react-vis\";\nimport { caseStatusLast60Days } from \"../shared/data\";\n\nconst data = caseStatusLast60Days.map((d) => ({\n  angle: d.value,\n  label: d.name,\n}));\n\nconst ReactVisArcChartImpl = () => (\n  <RadialChart data={data} height={300} width={300} innerRadius={50} />\n);\n\nexport default ReactVisArcChartImpl;\n","import \"../../node_modules/react-vis/dist/style.css\";\nimport {\n  FlexibleWidthXYPlot,\n  HorizontalGridLines,\n  VerticalBarSeries,\n  VerticalGridLines,\n  XAxis,\n  YAxis,\n} from \"react-vis\";\nimport { averageTimeToClose } from \"../shared/data\";\n\nconst data1 = averageTimeToClose.map((d) => ({\n  x: d.hours,\n  y: d.hh,\n}));\n\nconst data2 = averageTimeToClose.map((d) => ({\n  x: d.hours,\n  y: d.irf,\n}));\n\nconst data3 = averageTimeToClose.map((d) => ({\n  x: d.hours,\n  y: d.snf,\n}));\n\nconst ReactVisBarChartImpl = () => (\n  <FlexibleWidthXYPlot height={300} xType=\"ordinal\" stackBy=\"y\">\n    <VerticalGridLines />\n    <HorizontalGridLines />\n    <XAxis />\n    <YAxis />\n    <VerticalBarSeries data={data1} barWidth={0.5} />\n    <VerticalBarSeries data={data2} barWidth={0.5} />\n    <VerticalBarSeries data={data3} barWidth={0.5} />\n  </FlexibleWidthXYPlot>\n);\n\nexport default ReactVisBarChartImpl;\n","import \"./App.css\";\n\nimport React from \"react\";\n\nimport ReactVisAreaChartImpl from \"./reactvis/ReactVisAreaChartImpl\";\nimport ReactVisLineChartImpl from \"./reactvis/ReactVisLineChartImpl\";\nimport AreaChartImpl from \"./recharts/AreaChartImpl\";\nimport BarChartImpl from \"./recharts/BarChartImpl\";\nimport LineChartImpl from \"./recharts/LineChartImpl\";\nimport PieChartImpl from \"./recharts/PieChartImpl\";\nimport ChartContainer from \"./shared/ChartContainer\";\nimport { chartAspect } from \"./shared/constants\";\nimport VictoryAreaChartImpl from \"./victory/VictoryAreaChartImpl\";\nimport VictoryBarChartImpl from \"./victory/VictoryBarChartImpl\";\nimport VictoryLineChartImpl from \"./victory/VictoryLineChartImpl\";\nimport VictoryPieChartImpl from \"./victory/VictoryPieChartImpl\";\nimport ReactVisArcChartImpl from \"./reactvis/ReactVisArcChartImpl\";\nimport ReactVisBarChartImpl from \"./reactvis/ReactVisBarChartImpl\";\n\nfunction App() {\n  return (\n    <main>\n      <h1>Recharts</h1>\n      <ChartContainer caption=\"Pending cases by date (line)\">\n        <LineChartImpl />\n      </ChartContainer>\n      <ChartContainer caption=\"Pending cases by date (area)\">\n        <AreaChartImpl />\n      </ChartContainer>\n      <ChartContainer caption=\"Case status, last 30 days (pie)\">\n        <PieChartImpl />\n      </ChartContainer>\n      <ChartContainer\n        caption=\"Avg hours to resolve, last 90 days (bar)\"\n        className=\"col-2\"\n      >\n        <BarChartImpl aspect={chartAspect * 2} />\n      </ChartContainer>\n      <h1>Victory</h1>\n      <ChartContainer caption=\"Pending cases by date (line)\">\n        <VictoryLineChartImpl />\n      </ChartContainer>\n      <ChartContainer caption=\"Pending cases by date (area)\">\n        <VictoryAreaChartImpl />\n      </ChartContainer>\n      <ChartContainer caption=\"Case status, last 30 days (pie)\">\n        <VictoryPieChartImpl />\n      </ChartContainer>\n      <ChartContainer\n        caption=\"Avg hours to resolve, last 90 days (bar)\"\n        className=\"col-2\"\n      >\n        <VictoryBarChartImpl />\n      </ChartContainer>\n      <h1>React-vis</h1>\n      <ChartContainer caption=\"Pending cases by date (line)\">\n        <ReactVisLineChartImpl />\n      </ChartContainer>\n      <ChartContainer caption=\"Pending cases by date (area)\">\n        <ReactVisAreaChartImpl />\n      </ChartContainer>\n      <ChartContainer caption=\"Case status, last 30 days (radial)\">\n        <ReactVisArcChartImpl />\n      </ChartContainer>\n      <ChartContainer\n        caption=\"Avg hours to resolve, last 90 days (bar)\"\n        className=\"col-2\"\n      >\n        <ReactVisBarChartImpl />\n      </ChartContainer>\n    </main>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}