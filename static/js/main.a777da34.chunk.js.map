{"version":3,"sources":["shared/constants.ts","shared/data.ts","recharts/LineChartImpl.tsx","recharts/AreaChartImpl.tsx","recharts/PieChartImpl.tsx","recharts/BarChartImpl.tsx","shared/ChartContainer.tsx","victory/VictoryLineChartImpl.tsx","victory/VictoryAreaChartImpl.tsx","victory/VictoryPieChartImpl.tsx","victory/VictoryBarChartImpl.tsx","reactvis/ReactVisLineChartImpl.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["chartAspect","chartColors","statusColors","approved","pending","denied","canceled","sampleCasesOverTime","date","pended","caseStatusLast60Days","name","value","averageTimeToClose","hours","hh","snf","irf","formatDate","format","parseISO","LineChartImpl","ResponsiveContainer","width","aspect","LineChart","data","Line","type","dataKey","stroke","CartesianGrid","XAxis","tickFormatter","YAxis","Tooltip","AreaChartImpl","AreaChart","Area","fill","PieChartImpl","PieChart","Pie","nameKey","label","innerRadius","map","entry","index","Cell","Legend","align","layout","verticalAlign","BarChartImpl","BarChart","Bar","stackId","ChartContainer","caption","children","className","VictoryLineChartImpl","theme","VictoryTheme","material","x","y","interpolation","style","dependentAxis","tickFormat","d","VictoryAreaChartImpl","VictoryPieChartImpl","VictoryBarChartImpl","colorScale","ix","getTime","ReactVisLineChartImpl","t","curve","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a777da34.chunk.js","sourcesContent":["export const chartAspect = 1.6;\n\nexport const chartColors = [\"#0088FE\", \"#00C49F\", \"#FFBB28\", \"#FF8042\"];\n\nexport const statusColors = {\n  approved: \"#00C49F\",\n  pending: \"#FF8042\",\n  denied: \"#cc0000\",\n  canceled: \"#777\",\n};\n","import { statusColors } from \"./constants\";\n\ntype caseOverTimeType = {\n  date: string;\n  pended: number;\n};\n\nexport const sampleCasesOverTime: caseOverTimeType[] = [\n  {\n    date: \"2021-09-05\",\n    pended: 16,\n  },\n  {\n    date: \"2021-09-06\",\n    pended: 15,\n  },\n  {\n    date: \"2021-09-07\",\n    pended: 21,\n  },\n  {\n    date: \"2021-09-08\",\n    pended: 20,\n  },\n  {\n    date: \"2021-09-09\",\n    pended: 23,\n  },\n  {\n    date: \"2021-09-10\",\n    pended: 15,\n  },\n  {\n    date: \"2021-09-11\",\n    pended: 10,\n  },\n];\n\ninterface caseStatusValue {\n  name: keyof typeof statusColors;\n  value: number;\n}\n\nexport const caseStatusLast60Days: caseStatusValue[] = [\n  { name: \"approved\", value: 45 },\n  { name: \"pending\", value: 17 },\n  { name: \"canceled\", value: 6 },\n  { name: \"denied\", value: 19 },\n];\n\nexport const averageTimeToClose = [\n  {\n    hours: \"0-4\",\n    hh: 1,\n    snf: 0,\n    irf: 1,\n  },\n  {\n    hours: \"5-8\",\n    hh: 2,\n    snf: 1,\n    irf: 0,\n  },\n  {\n    hours: \"9-12\",\n    hh: 5,\n    snf: 2,\n    irf: 3,\n  },\n  {\n    hours: \"13-16\",\n    hh: 8,\n    snf: 3,\n    irf: 4,\n  },\n  {\n    hours: \"17-20\",\n    hh: 11,\n    snf: 7,\n    irf: 2,\n  },\n  {\n    hours: \"21-24\",\n    hh: 12,\n    snf: 11,\n    irf: 6,\n  },\n  {\n    hours: \"25-28\",\n    hh: 17,\n    snf: 10,\n    irf: 5,\n  },\n  {\n    hours: \"29-32\",\n    hh: 11,\n    snf: 12,\n    irf: 5,\n  },\n  {\n    hours: \"33-36\",\n    hh: 10,\n    snf: 10,\n    irf: 4,\n  },\n  {\n    hours: \"37-40\",\n    hh: 7,\n    snf: 2,\n    irf: 3,\n  },\n  {\n    hours: \"41-44\",\n    hh: 5,\n    snf: 2,\n    irf: 2,\n  },\n  {\n    hours: \"45-48\",\n    hh: 3,\n    snf: 4,\n    irf: 0,\n  },\n  {\n    hours: \"> 48\",\n    hh: 5,\n    snf: 4,\n    irf: 2,\n  },\n];\n","import { format, parseISO } from \"date-fns\";\nimport {\n  CartesianGrid,\n  Line,\n  LineChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { chartAspect, statusColors } from \"../shared/constants\";\nimport { sampleCasesOverTime } from \"../shared/data\";\n\nconst formatDate = (date: string) => {\n  return format(parseISO(date), \"M/d\");\n};\n\nconst LineChartImpl = () => (\n  <ResponsiveContainer width=\"100%\" aspect={chartAspect}>\n    <LineChart data={sampleCasesOverTime}>\n      <Line\n        name=\"Pended cases\"\n        type=\"monotone\"\n        dataKey=\"pended\"\n        stroke={statusColors[\"pending\"]}\n      />\n      <CartesianGrid />\n      <XAxis dataKey=\"date\" tickFormatter={formatDate} />\n      <YAxis />\n      <Tooltip />\n    </LineChart>\n  </ResponsiveContainer>\n);\n\nexport default LineChartImpl;\n","import { format, parseISO } from \"date-fns\";\nimport {\n  Area,\n  AreaChart,\n  CartesianGrid,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { chartAspect, statusColors } from \"../shared/constants\";\nimport { sampleCasesOverTime } from \"../shared/data\";\n\nconst formatDate = (date: string) => {\n  return format(parseISO(date), \"M/d\");\n};\n\nconst AreaChartImpl = () => (\n  <ResponsiveContainer width=\"100%\" aspect={chartAspect}>\n    <AreaChart data={sampleCasesOverTime}>\n      <Area\n        name=\"Pended cases\"\n        type=\"monotone\"\n        dataKey=\"pended\"\n        stroke={statusColors[\"pending\"]}\n        fill=\"#FF8042aa\"\n      />\n      <CartesianGrid />\n      <XAxis dataKey=\"date\" tickFormatter={formatDate} />\n      <YAxis />\n      <Tooltip />\n    </AreaChart>\n  </ResponsiveContainer>\n);\n\nexport default AreaChartImpl;\n","import React from \"react\";\nimport { Cell, Legend, Pie, PieChart, ResponsiveContainer } from \"recharts\";\nimport { chartAspect, statusColors } from \"../shared/constants\";\nimport { caseStatusLast60Days } from \"../shared/data\";\n\nconst PieChartImpl = () => (\n  <ResponsiveContainer width=\"100%\" aspect={chartAspect}>\n    <PieChart>\n      <Pie\n        data={caseStatusLast60Days}\n        dataKey=\"value\"\n        nameKey=\"name\"\n        label\n        innerRadius=\"50%\"\n      >\n        {caseStatusLast60Days.map((entry, index) => (\n          <Cell key={index} fill={statusColors[entry.name]} />\n        ))}\n      </Pie>\n      <Legend align=\"right\" layout=\"vertical\" verticalAlign=\"top\" />\n    </PieChart>\n  </ResponsiveContainer>\n);\n\nexport default PieChartImpl;\n","import {\n  Bar,\n  BarChart,\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport { ChartProps } from \"../shared/ChartProps\";\nimport { chartAspect, chartColors } from \"../shared/constants\";\nimport { averageTimeToClose } from \"../shared/data\";\n\nconst BarChartImpl = ({ aspect = chartAspect }: ChartProps) => (\n  <ResponsiveContainer width=\"100%\" aspect={aspect}>\n    <BarChart data={averageTimeToClose}>\n      <CartesianGrid />\n      <XAxis dataKey=\"hours\" label=\"Hours\" />\n      <YAxis label=\"Cases\" />\n      <Tooltip />\n      <Legend />\n      <Bar dataKey=\"hh\" stackId=\"a\" fill={chartColors[0]} />\n      <Bar dataKey=\"snf\" stackId=\"a\" fill={chartColors[1]} />\n      <Bar dataKey=\"irf\" stackId=\"a\" fill={chartColors[2]} />\n    </BarChart>\n  </ResponsiveContainer>\n);\n\nexport default BarChartImpl;\n","import React from \"react\";\n\ntype Props = {\n  caption: string;\n  className?: string;\n};\n\nconst ChartContainer: React.FC<Props> = ({ caption, children, className }) => (\n  <figure className={className}>\n    {children}\n    <figcaption>{caption}</figcaption>\n  </figure>\n);\n\nexport default ChartContainer;\n","import { format, parseISO } from \"date-fns\";\nimport { VictoryAxis, VictoryChart, VictoryLine, VictoryTheme } from \"victory\";\nimport { statusColors } from \"../shared/constants\";\nimport { sampleCasesOverTime } from \"../shared/data\";\n\nconst formatDate = (date: string) => {\n  return format(parseISO(date), \"M/d\");\n};\n\nconst VictoryLineChartImpl = () => (\n  <VictoryChart theme={VictoryTheme.material}>\n    <VictoryLine\n      data={sampleCasesOverTime}\n      x=\"date\"\n      y=\"pended\"\n      interpolation=\"natural\"\n      style={{ data: { stroke: statusColors[\"pending\"] } }}\n    />\n    <VictoryAxis dependentAxis />\n    <VictoryAxis tickFormat={(d) => formatDate(d)} />\n  </VictoryChart>\n);\n\nexport default VictoryLineChartImpl;\n","import { format, parseISO } from \"date-fns\";\nimport { VictoryArea, VictoryAxis, VictoryChart, VictoryTheme } from \"victory\";\nimport { statusColors } from \"../shared/constants\";\nimport { sampleCasesOverTime } from \"../shared/data\";\n\nconst formatDate = (date: string) => {\n  return format(parseISO(date), \"M/d\");\n};\n\nconst VictoryAreaChartImpl = () => (\n  <VictoryChart theme={VictoryTheme.material}>\n    <VictoryArea\n      data={sampleCasesOverTime}\n      x=\"date\"\n      y=\"pended\"\n      interpolation=\"natural\"\n      style={{ data: { fill: \"#FF8042aa\", stroke: statusColors[\"pending\"] } }}\n    />\n    <VictoryAxis dependentAxis />\n    <VictoryAxis tickFormat={(d) => formatDate(d)} />\n  </VictoryChart>\n);\n\nexport default VictoryAreaChartImpl;\n","import { VictoryPie } from \"victory\";\nimport { caseStatusLast60Days } from \"../shared/data\";\n\nconst VictoryPieChartImpl = () => (\n  <VictoryPie data={caseStatusLast60Days} x=\"name\" y=\"value\" innerRadius={50} />\n);\n\nexport default VictoryPieChartImpl;\n","import { VictoryBar, VictoryChart, VictoryStack, VictoryTheme } from \"victory\";\nimport { chartColors } from \"../shared/constants\";\nimport { averageTimeToClose } from \"../shared/data\";\n\nconst VictoryBarChartImpl = () => (\n  <VictoryChart theme={VictoryTheme.material}>\n    <VictoryStack colorScale={chartColors}>\n      <VictoryBar data={averageTimeToClose} x=\"hours\" y=\"hh\" />\n      <VictoryBar data={averageTimeToClose} x=\"hours\" y=\"snf\" />\n      <VictoryBar data={averageTimeToClose} x=\"hours\" y=\"irf\" />\n    </VictoryStack>\n  </VictoryChart>\n);\n\nexport default VictoryBarChartImpl;\n","import \"../../node_modules/react-vis/dist/style.css\";\nimport { format, parseISO } from \"date-fns\";\nimport {\n  FlexibleXYPlot,\n  HorizontalGridLines,\n  LineSeries,\n  LineSeriesPoint,\n  VerticalGridLines,\n  XAxis,\n  YAxis,\n} from \"react-vis\";\nimport { sampleCasesOverTime } from \"../shared/data\";\n\nconst data: LineSeriesPoint[] = sampleCasesOverTime.map((d, ix) => ({\n  x: parseISO(d.date).getTime(),\n  y: d.pended,\n}));\n\nconst ReactVisLineChartImpl = () => (\n  <FlexibleXYPlot>\n    <VerticalGridLines />\n    <HorizontalGridLines />\n    <XAxis tickFormat={(t) => format(t, \"M/d\")} />\n    <YAxis />\n    <LineSeries data={data} curve=\"curveNatural\" />\n  </FlexibleXYPlot>\n);\n\nexport default ReactVisLineChartImpl;\n","import \"./App.css\";\nimport React from \"react\";\nimport LineChartImpl from \"./recharts/LineChartImpl\";\nimport AreaChartImpl from \"./recharts/AreaChartImpl\";\nimport PieChartImpl from \"./recharts/PieChartImpl\";\nimport BarChartImpl from \"./recharts/BarChartImpl\";\nimport ChartContainer from \"./shared/ChartContainer\";\nimport { chartAspect } from \"./shared/constants\";\nimport VictoryLineChartImpl from \"./victory/VictoryLineChartImpl\";\nimport VictoryAreaChartImpl from \"./victory/VictoryAreaChartImpl\";\nimport VictoryPieChartImpl from \"./victory/VictoryPieChartImpl\";\nimport VictoryBarChartImpl from \"./victory/VictoryBarChartImpl\";\nimport ReactVisLineChartImpl from \"./reactvis/ReactVisLineChartImpl\";\n\nfunction App() {\n  return (\n    <main>\n      <ChartContainer caption=\"Pending cases by date (react-vis: line)\">\n        <ReactVisLineChartImpl />\n      </ChartContainer>\n      <ChartContainer caption=\"Pending cases by date (recharts: line)\">\n        <LineChartImpl />\n      </ChartContainer>\n      <ChartContainer caption=\"Pending cases by date (recharts: area)\">\n        <AreaChartImpl />\n      </ChartContainer>\n      <ChartContainer caption=\"Case status, last 30 days (recharts: pie)\">\n        <PieChartImpl />\n      </ChartContainer>\n      <ChartContainer\n        caption=\"Avg hours to resolve, last 90 days (recharts: bar)\"\n        className=\"col-2\"\n      >\n        <BarChartImpl aspect={chartAspect * 2} />\n      </ChartContainer>\n      <ChartContainer\n        caption=\"Pending cases by date (victory: line)\"\n        className=\"row-break\"\n      >\n        <VictoryLineChartImpl />\n      </ChartContainer>\n      <ChartContainer caption=\"Pending cases by date (victory: area)\">\n        <VictoryAreaChartImpl />\n      </ChartContainer>\n      <ChartContainer caption=\"Case status, last 30 days (victory: pie)\">\n        <VictoryPieChartImpl />\n      </ChartContainer>\n      <ChartContainer caption=\"Avg hours to resolve, last 90 days (victory: bar)\" className=\"col-2\">\n        <VictoryBarChartImpl />\n      </ChartContainer>\n    </main>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}